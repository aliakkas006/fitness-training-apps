openapi: 3.0.0
info:
  version: '1'
  title: Fitness Training Apps Rest API
  description: This is the first professional rest API project that I creating in full-stack army advanced backend course. This is a simple fitness training application where user can see their daily workouts plan and doing CRUD operation on it.They can also create their account and login to their existing account.
  contact:
    name: Ali Akkas
    url: 'https://example.com'
    email: aliakkas006@gmail.com
servers:
  - description: Dev
    url: 'http://localhost:4000/api/v1'
tags:
  - name: Auth
    description: Authentication Endpoints (public)
  - name: Workout plan
    description: Workout plan Endpoints (public + private)
  - name: Progress
    description: Progress Endpoints (private)
  - name: User
    description: User Endpoints (only for admin)
  - name: Profile
    description: Profile Endpoints (private)
  - name: Token
    description: Token Endpoints (only for admin)
paths:
  /auth/register:
    post:
      description: Create a new account
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Anisur Rahman
                email:
                  type: string
                  format: email
                  example: anis@gmail.com
                password:
                  type: string
                  format: password
                  example: Pass1$23
              required:
                - name
                - email
                - password
      responses:
        '201':
          description: Account Created Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: register Successful
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /auth/register
                      login:
                        type: string
                        example: /auth/login
        '400':
          $ref: '#/paths/~1users/get/responses/400'
        '500':
          $ref: '#/paths/~1users/get/responses/500'
  /auth/login:
    post:
      description: login to your account
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: anis@gmail.com
                password:
                  type: string
                  format: password
                  example: Pass1$23
              required:
                - email
                - password
      responses:
        '200':
          description: login Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: login Successful
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /auth/login
        '400':
          $ref: '#/paths/~1users/get/responses/400'
        '500':
          $ref: '#/paths/~1users/get/responses/500'
  /auth/logout:
    post:
      description: logout from account
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw9p
              required:
                - token
      responses:
        '200':
          description: logout Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Logout Successfully!
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /auth/logout
                      login:
                        type: string
                        example: /auth/login
        '400':
          $ref: '#/paths/~1users/get/responses/400'
        '500':
          $ref: '#/paths/~1users/get/responses/500'
  /workouts:
    get:
      tags:
        - Workout plan
      description: Retrieve all workouts plan
      parameters:
        - $ref: '#/paths/~1users/get/parameters/0'
        - $ref: '#/paths/~1users/get/parameters/1'
        - $ref: '#/paths/~1users/get/parameters/2'
        - $ref: '#/paths/~1users/get/parameters/3'
        - in: query
          name: search
          description: the search term
          schema:
            type: string
            example: workout name
      responses:
        '200':
          description: Return a list of Workouts data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: integer
                              format: int32
                              example: 1
                            name:
                              type: string
                              example: Heavy DT
                            mode:
                              type: string
                              example: 5 Rounds For Time
                            equipment:
                              type: string
                              example:
                                - barbell
                                - rope
                            exercises:
                              type: string
                              example:
                                - 9 deadlifts
                                - 5 hang power cleans
                                - 4 push jerks
                            trainerTips:
                              type: string
                              example:
                                - Aim for unbroken push jerks
                                - 'The first three rounds might feel terrible, but stick to it'
                                - RX Weights - 205lb/145lb
                            photo:
                              type: string
                              format: url
                              example: 'https://s3.aws.com/my-fitness/img.jpg'
                            builder:
                              $ref: '#/paths/~1profiles~1%7Bid%7D/get/responses/200/content/application~1json/schema/properties/data/allOf/1/properties/user'
                            link:
                              type: string
                              format: url
                              example: /workouts/1
                          required:
                            - id
                            - name
                            - mode
                            - equipment
                            - exercises
                            - trainerTips
                            - builder
                        - $ref: '#/paths/~1users/get/responses/200/content/application~1json/schema/properties/data/items/allOf/1'
                  pagination:
                    $ref: '#/paths/~1users/get/responses/200/content/application~1json/schema/properties/pagination'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: /workouts?page=2&limit=10
                      next:
                        type: string
                        format: url
                        example: /workouts?page=3&limit=10
                      prev:
                        type: string
                        format: url
                        example: /workouts?page=1&limit=10
        '400':
          $ref: '#/paths/~1users/get/responses/400'
        '500':
          $ref: '#/paths/~1users/get/responses/500'
    post:
      operationId: createWorkoutPlan
      security:
        - bearerAuth: []
      tags:
        - Workout plan
      description: Create a new workout plan
      requestBody:
        description: To create a new workout plan user must be authenticated and also provide valid data.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Heavy DT
                mode:
                  type: string
                  example: 5 Rounds For Time
                equipment:
                  type: array
                  items:
                    type: string
                  example:
                    - barbell
                    - rope
                exercises:
                  type: array
                  items:
                    type: string
                  example:
                    - 9 deadlifts
                    - 5 hang power cleans
                    - 4 push jerks
                trainerTips:
                  type: array
                  items:
                    type: string
                  example:
                    - Aim for unbroken push jerks
                    - 'The first three rounds might feel terrible, but stick to it'
                    - RX Weights - 205lb/145lb
                photo:
                  type: string
                  format: url
                  example: 'https://s3.aws.com/my-fitness/img.jpg'
                status:
                  type: string
                  enum:
                    - progress
                    - done
                  example: progress
              required:
                - name
                - mode
                - equipment
                - exercises
                - trainerTips
      responses:
        '201':
          description: Successfully created a new workout plan
          content:
            application/jsom:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: Workout plan created successfully!
                  data:
                    $ref: '#/paths/~1workouts~1%7Bid%7D/get/responses/200/content/application~1json/schema/properties/data/allOf/0'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: workouts/1
                      profile:
                        type: string
                        format: url
                        example: workouts/1/profile
                      progress:
                        type: string
                        format: url
                        example: workouts/1/progress
        '400':
          $ref: '#/paths/~1users/get/responses/400'
        '401':
          $ref: '#/paths/~1users/post/responses/401'
        '500':
          $ref: '#/paths/~1users/get/responses/500'
  '/workouts/{id}':
    get:
      tags:
        - Workout plan
      description: Fetch a Workout plan
      parameters:
        - $ref: '#/paths/~1users~1%7Bid%7D/get/parameters/0'
        - in: query
          name: expand
          description: Expand builder and progress object
          schema:
            type: string
            example: 'builder, progress'
      responses:
        '200':
          description: Single Workout plan view
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  data:
                    allOf:
                      - allOf:
                          - type: object
                            properties:
                              id:
                                type: integer
                                format: int32
                                example: 1
                              builderId:
                                type: integer
                                format: int32
                                example: 1
                              name:
                                type: string
                                example: Heavy DT
                              mode:
                                type: string
                                example: 5 Rounds For Time
                              equipment:
                                type: string
                                example:
                                  - barbell
                                  - rope
                              exercises:
                                type: string
                                example:
                                  - 9 deadlifts
                                  - 5 hang power cleans
                                  - 4 push jerks
                              trainerTips:
                                type: string
                                example:
                                  - Aim for unbroken push jerks
                                  - 'The first three rounds might feel terrible, but stick to it'
                                  - RX Weights - 205lb/145lb
                              photo:
                                type: string
                                format: url
                                example: 'https://s3.aws.com/my-fitness/img.jpg'
                              status:
                                type: string
                                enum:
                                  - progress
                                  - done
                                example: progress
                            required:
                              - id
                              - builderId
                              - name
                              - mode
                              - equipment
                              - exercises
                              - trainerTips
                              - status
                          - $ref: '#/paths/~1users/get/responses/200/content/application~1json/schema/properties/data/items/allOf/1'
                      - type: object
                        properties:
                          builder:
                            $ref: '#/paths/~1profiles~1%7Bid%7D/get/responses/200/content/application~1json/schema/properties/data/allOf/1/properties/user'
                      - type: object
                        properties:
                          progress:
                            $ref: '#/paths/~1progress~1%7Bid%7D/patch/responses/200/content/application~1json/schema/properties/data'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: workouts/1
                      profile:
                        type: string
                        format: url
                        example: workouts/1/profile
                      progress:
                        type: string
                        format: url
                        example: workouts/1/progress
        '400':
          $ref: '#/paths/~1users/get/responses/400'
        '404':
          $ref: '#/paths/~1users~1%7Bid%7D/get/responses/404'
        '500':
          $ref: '#/paths/~1users/get/responses/500'
    put:
      security:
        - bearerAuth: []
      tags:
        - Workout plan
      description: Create or update the entire Workout plan
      parameters:
        - $ref: '#/paths/~1users~1%7Bid%7D/get/parameters/0'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: int32
                  example: 1
                name:
                  type: string
                  example: Workout name
                mode:
                  type: string
                  example: Workout mode
                equipment:
                  type: array
                  items:
                    type: string
                  example:
                    - Equipment-01
                    - Equipment-02
                    - Equipment-03
                exercises:
                  type: array
                  items:
                    type: string
                  example:
                    - Exercise-01
                    - Exercise-02
                    - Exercise-03
                trainerTips:
                  type: array
                  items:
                    type: string
                  example:
                    - Trainer tips-01
                    - Trainer tips-02
                    - Trainer tips-03
                photo:
                  type: string
                  format: url
                  example: 'https://s3.aws.workouts/3.png'
                status:
                  type: string
                  enum:
                    - progress
                    - done
                  example: progress
              required:
                - name
                - mode
                - equipment
                - exercises
                - trainerTips
      responses:
        '200':
          description: Successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Workout plan updated successfully!
                  data:
                    $ref: '#/paths/~1workouts~1%7Bid%7D/get/responses/200/content/application~1json/schema/properties/data/allOf/0'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: workouts/1
        '201':
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/paths/~1workouts/post/responses/201/content/application~1jsom/schema'
        '400':
          $ref: '#/paths/~1users/get/responses/400'
        '401':
          $ref: '#/paths/~1users/post/responses/401'
        '500':
          $ref: '#/paths/~1users/get/responses/500'
    patch:
      security:
        - bearerAuth: []
      tags:
        - Workout plan
      description: Partially updated a Workout plan
      parameters:
        - $ref: '#/paths/~1users~1%7Bid%7D/get/parameters/0'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Workout name
                mode:
                  type: string
                  example: Workout mode
                equipment:
                  type: string
                  example:
                    - Equipment-01
                    - Equipment-02
                exercises:
                  type: string
                  example:
                    - Exercise-01
                    - Exercise-02
                    - Exercise-03
                photo:
                  type: string
                  format: url
                  example: 'https://s3.aws.workouts/3.png'
                status:
                  type: string
                  enum:
                    - progress
                    - done
                  example: progress
      responses:
        '200':
          description: Successfully updated
          content:
            application/json:
              schema:
                $ref: '#/paths/~1workouts~1%7Bid%7D/put/responses/200/content/application~1json/schema'
        '400':
          $ref: '#/paths/~1users/get/responses/400'
        '401':
          $ref: '#/paths/~1users/post/responses/401'
        '404':
          $ref: '#/paths/~1users~1%7Bid%7D/get/responses/404'
        '500':
          $ref: '#/paths/~1users/get/responses/500'
    delete:
      security:
        - bearerAuth: []
      tags:
        - Workout plan
      description: Delete a workout plan by id
      parameters:
        - $ref: '#/paths/~1users~1%7Bid%7D/get/parameters/0'
      responses:
        '204':
          description: Workout plan deleted successfully!
        '401':
          $ref: '#/paths/~1users/post/responses/401'
        '404':
          $ref: '#/paths/~1users~1%7Bid%7D/get/responses/404'
        '500':
          $ref: '#/paths/~1users/get/responses/500'
  /progress:
    get:
      security:
        - bearerAuth: []
      tags:
        - Progress
      description: Users can see a list of their progress and admin can see a list of all progress
      parameters:
        - $ref: '#/paths/~1users/get/parameters/0'
        - $ref: '#/paths/~1users/get/parameters/1'
        - $ref: '#/paths/~1users/get/parameters/2'
        - $ref: '#/paths/~1users/get/parameters/3'
      responses:
        '200':
          description: Return a list of progress data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: integer
                              format: int32
                              example: 1
                            workoutSession:
                              type: string
                              example: 50 min
                            trackProgress:
                              type: object
                              properties:
                                newHeight:
                                  type: string
                                  example: 5.8 feet
                                newWeight:
                                  type: string
                                  example: 60 kg
                                newFitnessLevel:
                                  type: string
                                  enum:
                                    - beginner
                                    - intermmediate
                                    - advanced
                                  example: intermmediate
                                achievedGoal:
                                  type: string
                                  enum:
                                    - lose_weight
                                    - build_muscle
                                    - maintain_fitness
                                  example: build_muscle
                            performance:
                              type: string
                              example: Body Composition coordinated
                            status:
                              type: string
                              enum:
                                - public
                                - private
                              example: public
                            builder:
                              $ref: '#/paths/~1profiles~1%7Bid%7D/get/responses/200/content/application~1json/schema/properties/data/allOf/1/properties/user'
                            workout:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  format: int32
                                  example: 101
                                name:
                                  type: string
                                  example: Push Jerk
                              required:
                                - id
                                - name
                          required:
                            - id
                            - workoutSession
                            - trackProgress
                            - performance
                            - builder
                            - workout
                        - $ref: '#/paths/~1users/get/responses/200/content/application~1json/schema/properties/data/items/allOf/1'
                  pagination:
                    $ref: '#/paths/~1users/get/responses/200/content/application~1json/schema/properties/pagination'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: /progress?page=2&limit=10
                      next:
                        type: string
                        format: url
                        example: /progress?page=3&limit=10
                      prev:
                        type: string
                        format: url
                        example: /progress?page=1&limit=10
                      workoutPlan:
                        type: string
                        format: url
                        example: /progress?workoutId=56645555df
                      builder:
                        type: string
                        format: url
                        example: /progress?builderId=47855555dd
        '400':
          $ref: '#/paths/~1users/get/responses/400'
        '500':
          $ref: '#/paths/~1users/get/responses/500'
    post:
      operationId: createProgress
      security:
        - bearerAuth: []
      tags:
        - Progress
      description: Create a new progress
      requestBody:
        description: To create a new progress user must be authenticated and also provide valid data
        content:
          application/json:
            schema:
              type: object
              properties:
                workoutSession:
                  type: string
                  example: 50 min
                trackProgress:
                  type: object
                  properties:
                    newHeight:
                      type: string
                      example: 5.8 feet
                    newWeight:
                      type: string
                      example: 60 kg
                    newFitnessLevel:
                      type: string
                      enum:
                        - beginner
                        - intermmediate
                        - advanced
                      example: intermmediate
                    achievedGoal:
                      type: string
                      enum:
                        - lose_weight
                        - build_muscle
                        - maintain_fitness
                      example: build_muscle
                performance:
                  type: string
                  example: Body Composition coordinated
                workoutId:
                  type: string
                  example: 64feeb01f731d5ccd1118f5a
                status:
                  type: string
                  enum:
                    - public
                    - private
                  example: public
              required:
                - workoutSession
                - trackProgress
                - performance
                - workoutId
      responses:
        '201':
          description: Successfully created a new progress
          content:
            application/jsom:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: Progress created successfully!
                  data:
                    $ref: '#/paths/~1progress~1%7Bid%7D/patch/responses/200/content/application~1json/schema/properties/data'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: progress/1
        '400':
          $ref: '#/paths/~1users/get/responses/400'
        '401':
          $ref: '#/paths/~1users/post/responses/401'
        '500':
          $ref: '#/paths/~1users/get/responses/500'
  '/progress/{id}':
    patch:
      security:
        - bearerAuth: []
      tags:
        - Progress
      description: Admin can update any progress and authenticate users can update only their progress
      parameters:
        - $ref: '#/paths/~1users~1%7Bid%7D/get/parameters/0'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                workoutSession:
                  type: string
                  example: 1 hr
                trackProgress:
                  type: object
                  properties:
                    newHeight:
                      type: string
                      example: 5.8 feet
                    newWeight:
                      type: string
                      example: 60 kg
                    newFitnessLevel:
                      type: string
                      enum:
                        - beginner
                        - intermmediate
                        - advanced
                      example: intermmediate
                    achievedGoal:
                      type: string
                      enum:
                        - lose_weight
                        - build_muscle
                        - maintain_fitness
                      example: build_muscle
                performance:
                  type: string
                  example: Body Composition coordinated
                status:
                  type: string
                  enum:
                    - public
                    - private
                  example: public
      responses:
        '200':
          description: Progress updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Successfully updated progress property
                  data:
                    allOf:
                      - type: object
                        properties:
                          id:
                            type: integer
                            format: int32
                            example: 1
                          builderId:
                            type: integer
                            format: int32
                            example: 1
                          workoutId:
                            type: integer
                            format: int32
                            example: 111
                          workoutSession:
                            type: string
                            example: 50 min
                          trackProgress:
                            type: object
                            properties:
                              newHeight:
                                type: string
                                example: 5.8 feet
                              newWeight:
                                type: string
                                example: 60 kg
                              newFitnessLevel:
                                type: string
                                example: intermmediate
                              achievedGoal:
                                type: string
                                enum:
                                  - lose_weight
                                  - build_muscle
                                  - maintain_fitness
                                example: build_muscle
                          performance:
                            type: string
                            example: Body Composition coordinated
                          status:
                            type: string
                            enum:
                              - public
                              - private
                            example: public
                        required:
                          - id
                          - builderId
                          - workoutId
                          - workoutSession
                          - trackProgress
                          - performance
                          - status
                      - $ref: '#/paths/~1users/get/responses/200/content/application~1json/schema/properties/data/items/allOf/1'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: progress/1
        '400':
          $ref: '#/paths/~1users/get/responses/400'
        '401':
          $ref: '#/paths/~1users/post/responses/401'
        '404':
          $ref: '#/paths/~1users~1%7Bid%7D/get/responses/404'
    delete:
      security:
        - bearerAuth: []
      tags:
        - Progress
      description: Admin can delete any progress data but authenticate users can delete only their progress data.
      parameters:
        - $ref: '#/paths/~1users~1%7Bid%7D/get/parameters/0'
      responses:
        '204':
          description: Progress deleted successfully!
        '401':
          $ref: '#/paths/~1users/post/responses/401'
        '404':
          $ref: '#/paths/~1users~1%7Bid%7D/get/responses/404'
        '500':
          $ref: '#/paths/~1users/get/responses/500'
  /users:
    get:
      security:
        - bearerAuth: []
      tags:
        - User
      description: Retrive all users
      parameters:
        - in: query
          name: page
          description: current page number
          required: true
          schema:
            type: integer
            format: int32
            example: 2
        - in: query
          name: limit
          description: the number of objects should be returned
          required: true
          schema:
            type: integer
            format: int32
            example: 10
        - in: query
          name: sort_type
          description: type of sort (asc or dsc)
          schema:
            type: string
            enum:
              - asc
              - dsc
            example: dsc
        - in: query
          name: sort_by
          description: sort key
          schema:
            type: string
            example: updatedAt
        - in: query
          name: name
          description: Name of the user
          schema:
            type: string
            example: Ali Akkas
        - in: query
          name: email
          description: Email of the user
          schema:
            type: string
            example: aliakkas006@gmail.com
      responses:
        '200':
          description: Return a list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: integer
                              format: int32
                              example: 1
                            name:
                              type: string
                              example: user_1
                            email:
                              type: string
                              example: user@gmail.com
                          required:
                            - id
                            - name
                            - email
                        - type: object
                          properties:
                            createdAt:
                              type: string
                              format: date-time
                            updatedAt:
                              type: string
                              format: date-time
                          required:
                            - createdAt
                            - updatedAt
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        format: int32
                        example: 2
                      limit:
                        type: integer
                        format: int32
                        example: 10
                      next:
                        type: integer
                        format: int32
                        example: 3
                      prev:
                        type: integer
                        format: int32
                        example: 1
                      totalPage:
                        type: integer
                        format: int32
                        example: 5
                      totalItems:
                        type: integer
                        format: int32
                        example: 10
                    required:
                      - page
                      - limit
                      - totalPage
                      - totalItems
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: /users?page=2&limit=10
                      next:
                        type: string
                        format: url
                        example: /users?page=3&limit=10
                      prev:
                        type: string
                        format: url
                        example: /users?page=1&limit=10
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 400
                  error:
                    type: string
                    example: Bad Request
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example: input field's value
                        message:
                          type: string
                          example: Invalid field's value
                        in:
                          type: string
                          enum:
                            - query
                            - body
                          example: body
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 500
                  error:
                    type: string
                    example: Internal Server Error!
                  message:
                    type: string
                    example: We are sorry for the inconvenience. Please try again later...
    post:
      operationId: createUser
      security:
        - bearerAuth: []
      tags:
        - User
      description: Create a new user
      requestBody:
        description: To create a new user admin must need to provide valid data
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: user_1
                email:
                  type: string
                  format: email
                  example: user@gmail.com
                password:
                  type: string
                  format: password
                  example: user123
                role:
                  type: string
                  enum:
                    - user
                    - admin
                  example: user
                status:
                  type: string
                  enum:
                    - pending
                    - approved
                    - block
                    - decline
                  example: pending
              required:
                - name
                - email
                - password
      responses:
        '201':
          description: Successfully created a new user
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: User created successfully
                  data:
                    $ref: '#/paths/~1users~1%7Bid%7D/patch/responses/200/content/application~1json/schema/properties/data'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: /users/1
                      edit:
                        type: string
                        format: url
                        example: /users/1/edit
                      delete:
                        type: string
                        format: url
                        example: /users/1/delete
                      view:
                        type: string
                        format: url
                        example: /users/1/view
        '400':
          $ref: '#/paths/~1users/get/responses/400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 401
                  error:
                    type: string
                    example: Unauthorized!
                  message:
                    type: string
                    example: You don't have the right permissions!
        '500':
          $ref: '#/paths/~1users/get/responses/500'
  '/users/{id}':
    get:
      security:
        - bearerAuth: []
      tags:
        - User
      description: Fetch a single user
      parameters:
        - in: path
          name: id
          required: true
          description: Object ID
          schema:
            type: string
            example: 64d715dd8ef5b49a6953943d
      responses:
        '200':
          description: Single user view
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Successfully fetch a user
                  data:
                    allOf:
                      - $ref: '#/paths/~1users~1%7Bid%7D/patch/responses/200/content/application~1json/schema/properties/data'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: /users/1
        '404':
          description: Resource Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 404
                  error:
                    type: string
                    example: Page Not Found!
                  message:
                    type: string
                    example: Requested resource not found!
    patch:
      security:
        - bearerAuth: []
      tags:
        - User
      description: Partially updated a single user
      parameters:
        - $ref: '#/paths/~1users~1%7Bid%7D/get/parameters/0'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Ali Akkas
                email:
                  type: string
                  format: email
                  example: ali@gmail.com
                role:
                  type: string
                  enum:
                    - user
                    - admin
                  example: user
                status:
                  type: string
                  enum:
                    - pending
                    - approved
                    - block
                    - decline
      responses:
        '200':
          description: User property updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Successfully updated user property
                  data:
                    allOf:
                      - type: object
                        properties:
                          id:
                            type: integer
                            format: int32
                            example: 1
                          name:
                            type: string
                            example: Ali Akkas
                          email:
                            type: string
                            format: email
                            example: akkas@gmail.com
                          role:
                            type: string
                            enum:
                              - user
                              - admin
                            example: user
                          status:
                            type: string
                            enum:
                              - pending
                              - approved
                              - block
                              - decline
                            example: pending
                        required:
                          - id
                          - name
                          - email
                          - status
                      - $ref: '#/paths/~1users/get/responses/200/content/application~1json/schema/properties/data/items/allOf/1'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: users/1
        '400':
          $ref: '#/paths/~1users/get/responses/400'
        '401':
          $ref: '#/paths/~1users/post/responses/401'
        '404':
          $ref: '#/paths/~1users~1%7Bid%7D/get/responses/404'
    delete:
      security:
        - bearerAuth: []
      tags:
        - User
      description: Delete a user by id
      parameters:
        - $ref: '#/paths/~1users~1%7Bid%7D/get/parameters/0'
      responses:
        '204':
          description: User Deleted Successfully!
        '401':
          $ref: '#/paths/~1users/post/responses/401'
        '404':
          $ref: '#/paths/~1users~1%7Bid%7D/get/responses/404'
  '/users/{id}/password':
    patch:
      security:
        - bearerAuth: []
      tags:
        - User
      description: Change password
      parameters:
        - $ref: '#/paths/~1users~1%7Bid%7D/get/parameters/0'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  format: password
                  example: pass123
      responses:
        '200':
          description: Change the password of the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Password Changed Successfully!
                  links:
                    type: object
                    properties:
                      view:
                        type: string
                        format: url
                        example: /users/1/view
        '400':
          $ref: '#/paths/~1users/get/responses/400'
        '401':
          $ref: '#/paths/~1users/post/responses/401'
        '404':
          $ref: '#/paths/~1users~1%7Bid%7D/get/responses/404'
  /profiles:
    get:
      security:
        - bearerAuth: []
      tags:
        - Profile
      description: Retrieve all user profiles
      parameters:
        - $ref: '#/paths/~1users/get/parameters/0'
        - $ref: '#/paths/~1users/get/parameters/1'
        - $ref: '#/paths/~1users/get/parameters/2'
        - $ref: '#/paths/~1users/get/parameters/3'
        - in: query
          name: firstName
          description: First Name of the user profile
          schema:
            type: string
            example: Ali
        - in: query
          name: lastName
          description: Last Name of the user profile
          schema:
            type: string
            example: Akkas
        - in: query
          name: email
          description: Email of the user profile
          schema:
            type: string
            format: email
            example: ali@gmail.com
      responses:
        '200':
          description: Return a list of User Profiles
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: integer
                              format: int32
                              example: 1
                            firstName:
                              type: string
                              example: Ali
                            lastName:
                              type: string
                              example: Akkas
                            email:
                              type: string
                              format: email
                              example: ali@gmail.com
                            profilePic:
                              type: string
                              format: url
                              example: 'https://s3.aws.com/my-fitness/img.jpg'
                            age:
                              type: integer
                              format: int32
                              example: 23
                            height:
                              type: integer
                              format: int32
                              example: 6
                            weight:
                              type: integer
                              format: int32
                              example: 60
                            fitnessLevel:
                              type: string
                              enum:
                                - beginner
                                - intermmediate
                                - advanced
                              example: beginner
                            goal:
                              type: string
                              enum:
                                - lose_weight
                                - build_muscle
                                - maintain_fitness
                              example: maintain_fitness
                            user:
                              $ref: '#/paths/~1profiles~1%7Bid%7D/get/responses/200/content/application~1json/schema/properties/data/allOf/1/properties/user'
                          required:
                            - id
                            - firstName
                            - lastName
                            - email
                            - age
                            - height
                            - weight
                            - fitnessLevel
                            - goal
                            - user
                        - $ref: '#/paths/~1users/get/responses/200/content/application~1json/schema/properties/data/items/allOf/1'
                  pagination:
                    $ref: '#/paths/~1users/get/responses/200/content/application~1json/schema/properties/pagination'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: /profiles?page=2&limit=10
                      next:
                        type: string
                        format: url
                        example: /profiles?page=3&limit=10
                      prev:
                        type: string
                        format: url
                        example: /profiles?page=1&limit=10
        '400':
          $ref: '#/paths/~1users/get/responses/400'
        '500':
          $ref: '#/paths/~1users/get/responses/500'
    post:
      operationId: createProfile
      security:
        - bearerAuth: []
      tags:
        - Profile
      description: Create a new profile
      requestBody:
        description: To create a new user profile user must need to provide valid data
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: Ali
                lastName:
                  type: string
                  example: Akkas
                email:
                  type: string
                  format: email
                  example: akkas@gmail.com
                profilePic:
                  type: string
                  format: url
                  example: 'https://s3.aws.com/my-fitness/img.jpg'
                age:
                  type: integer
                  format: int32
                  example: 23
                height:
                  type: integer
                  format: int32
                  example: 6
                weight:
                  type: integer
                  format: int32
                  example: 60
                fitnessLevel:
                  type: string
                  enum:
                    - beginner
                    - intermmediate
                    - advanced
                  example: beginner
                goal:
                  type: string
                  enum:
                    - lose_weight
                    - build_muscle
                    - maintain_fitness
                  example: maintain_fitness
              required:
                - firstName
                - lastName
                - email
                - age
                - height
                - weight
                - fitnessLevel
                - goal
      responses:
        '201':
          description: Successfully created a new Profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: User Profile created successfully
                  data:
                    $ref: '#/paths/~1profiles~1%7Bid%7D/patch/responses/200/content/application~1json/schema/properties/data'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: /profiles/1
                      edit:
                        type: string
                        format: url
                        example: /profiles/1/edit
                      delete:
                        type: string
                        format: url
                        example: /profiles/1/delete
                      view:
                        type: string
                        format: url
                        example: /users/1/view
        '400':
          $ref: '#/paths/~1users/get/responses/400'
        '401':
          $ref: '#/paths/~1users/post/responses/401'
        '500':
          $ref: '#/paths/~1users/get/responses/500'
  '/profiles/{id}':
    get:
      security:
        - bearerAuth: []
      tags:
        - Profile
      description: Fetch a single user profile
      parameters:
        - $ref: '#/paths/~1users~1%7Bid%7D/get/parameters/0'
      responses:
        '200':
          description: Single profile view
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  data:
                    allOf:
                      - $ref: '#/paths/~1profiles~1%7Bid%7D/patch/responses/200/content/application~1json/schema/properties/data'
                      - type: object
                        properties:
                          user:
                            type: object
                            properties:
                              id:
                                type: integer
                                format: int32
                                example: 101
                              name:
                                type: string
                                example: Ali Akkas
                            required:
                              - id
                              - name
        '404':
          $ref: '#/paths/~1users~1%7Bid%7D/get/responses/404'
    patch:
      security:
        - bearerAuth: []
      tags:
        - Profile
      description: Partially updated a user profile
      parameters:
        - $ref: '#/paths/~1users~1%7Bid%7D/get/parameters/0'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: Ali
                lastName:
                  type: string
                  example: Akkas
                email:
                  type: string
                  format: email
                  example: example@user.com
                profilePic:
                  type: string
                  format: url
                  example: 'https://s3.aws.com/my-fitness/img.jpg'
                age:
                  type: integer
                  format: int32
                  example: 23
                height:
                  type: integer
                  format: int32
                  example: 6
                weight:
                  type: integer
                  format: int32
                  example: 60
                fitnessLevel:
                  type: string
                  enum:
                    - beginner
                    - intermmediate
                    - advanced
                  example: beginner
                goal:
                  type: string
                  enum:
                    - lose_weight
                    - build_muscle
                    - maintain_fitness
                  example: maintain_fitness
      responses:
        '200':
          description: User Profile property updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Successfully updated
                  data:
                    allOf:
                      - type: object
                        properties:
                          id:
                            type: integer
                            format: int32
                            example: 1
                          userId:
                            type: integer
                            format: int32
                            example: 101
                          firstName:
                            type: string
                            example: Ali
                          lastName:
                            type: string
                            example: Akkas
                          email:
                            type: string
                            format: email
                            example: akkas@gmail.com
                          profilePic:
                            type: string
                            format: url
                            example: 'https://s3.aws.com/my-fitness/img.jpg'
                          age:
                            type: integer
                            format: int32
                            example: 23
                          height:
                            type: integer
                            format: int32
                            example: 6
                          weight:
                            type: integer
                            format: int32
                            example: 60
                          fitnessLevel:
                            type: string
                            enum:
                              - beginner
                              - intermmediate
                              - advanced
                            example: beginner
                          goal:
                            type: string
                            enum:
                              - lose_weight
                              - build_muscle
                              - maintain_fitness
                            example: maintain_fitness
                        required:
                          - id
                          - userId
                          - firstName
                          - lastName
                          - email
                          - age
                          - height
                          - weight
                          - fitnessLevel
                          - goal
                      - $ref: '#/paths/~1users/get/responses/200/content/application~1json/schema/properties/data/items/allOf/1'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: users/1
        '400':
          $ref: '#/paths/~1users/get/responses/400'
        '401':
          $ref: '#/paths/~1users/post/responses/401'
        '404':
          $ref: '#/paths/~1users~1%7Bid%7D/get/responses/404'
    delete:
      security:
        - bearerAuth: []
      tags:
        - Profile
      description: Delete a profile by id
      parameters:
        - $ref: '#/paths/~1users~1%7Bid%7D/get/parameters/0'
      responses:
        '204':
          description: Profile Deleted Successfully!
        '401':
          $ref: '#/paths/~1users/post/responses/401'
        '404':
          $ref: '#/paths/~1users~1%7Bid%7D/get/responses/404'
  /tokens/refresh:
    post:
      security:
        - bearerAuth: []
      description: Rotate refresh token
      tags:
        - Token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
              required:
                - token
      responses:
        '201':
          description: A new Access Token and Refresh Token generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: Successfully generated a new Access Token and Refresh Token
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                      refresh_token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw7Z
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /tokens/refresh
        '401':
          $ref: '#/paths/~1users/post/responses/401'
  /tokens/validate:
    post:
      security:
        - bearerAuth: []
      description: Validate refresh token
      tags:
        - Token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw9p
              required:
                - token
      responses:
        '200':
          description: Validate Token
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Token is valid!
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /tokens/validate
                      refresh:
                        type: string
                        example: /tokens/refresh
        '401':
          $ref: '#/paths/~1users/post/responses/401'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
